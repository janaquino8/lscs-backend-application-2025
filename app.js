import express from 'express';
import Joi from 'joi';
import { idSchema, productSchema } from './schema.js'
import { getProducts, getProductById, createProduct, updateProduct, deleteProduct  } from './connectdb.js';

const app = express();
const port = process.env.PORT || 3000;

// Declaration of middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

/**
 *  @description POST request to create a new product.
 */
app.post('/products', async (req, res) => {
    const { error, value } = productSchema.validate(req.body);

    if (error) {
        return res.status(400).json({ error: error.details[0].message });
    }

    const { name, price, description, type } = value;
    const prod = await createProduct(name, price, description, type);

    res.status(201).json(prod);
});

/**
 *  @description GET request to retrieve all products.
 */
app.get('/products', async (req, res) => {
    const prod = await getProducts();

    res.status(200).json(prod);
});

/**
 *  @description GET request to retrieve a single product by its ID.
 */
app.get('/products/:id', async (req, res) => {
    const id = req.params.id;
    const prod = await getProductById(id);

    if (prod) {
        return res.status(200).json(prod);
    }
    
    res.status(404).json({ error: "Product was not found." });
});

/**
 *  @description PUT request to update an existing product's details by its ID.
 */
app.put('/products/:id', async (req, res) => {
    try { // UPDATE
        const id = req.params.id;
        await Task.findByIdAndUpdate(id, req.body);
        const task = await Task.findById(id); 
        
        res.status(200).json(task);
    } catch (error) {
        res.status(500).send({error: error.message});
    }
});

/**
 *  @description DELETE request to delete a product by its ID.
 */
app.delete('/products/:id', async (req, res) => {
    const id = req.params.id;

    // Condition was generated by ChatGPT; validates that the id is a positive integer
    if (!/^\d+$/.test(id)) {
        return res.status(404).json({ error: "Product was not found." });
    }

    const prod = await deleteProduct(id);

    if (prod) {
        return res.status(200).json({ message: `Product with id ${id} was successfully deleted.` });
    }

    res.status(404).json({ error: "Product was not found." });
});

/**
 *  @description Sends an error message for 500 Internal Server Error
 */
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ error: "An internal server error occurred." });
});

/**
 *  @description Starts the server.
 */
app.listen(port, () => {
    console.log(`Products API is live on http://localhost:${port}`);
});
